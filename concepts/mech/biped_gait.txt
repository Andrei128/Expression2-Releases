@name biped_gait
@inputs 
@outputs 
@persist [GTime GSpan] [DT CT] [LMove RMove LOsc ROsc] [LPos RPos LHold RHold LGoto RGoto MPos MVel]:vector [MAng]:angle [MHeight MWidth]
@trigger none

#L = (GTime >= 0 & GTime <= GSpan) ? (GTime / GSpan) : ((GSpan > 1) & (GTime + 1 >= 0 & GTime + 1 <= GSpan)) ? ((GTime + 1) / GSpan) : 0
#R = (GTime >= 0.5 & GTime <= 0.5 + GSpan) ? ((GTime - 0.5) / (0.5 + GSpan - 0.5)) : ((0.5 + GSpan > 1) & (GTime + 1 >= 0.5 & GTime + 1 <= 0.5 + GSpan)) ? ((GTime + 1 - 0.5) / (0.5 + GSpan - 0.5)) : 0
#Gait = (GTime >= Gait_start & GTime <= Gait_start + GSpan) ? ((GTime - Gait_start) / (Gait_start + GSpan - Gait_start)) : ((Gait_start + GSpan > 1) & (GTime + 1 >= Gait_start & GTime + 1 <= Gait_start + GSpan)) ? ((GTime + 1 - Gait_start) / (Gait_start + GSpan - Gait_start)) : 0

if (first()) {
    for (I = 1, 3) {
        holoCreate(I)    
    }
    
    MHeight = 150
    MWidth  = 50
    
    MPos = LPos = RPos = LHold = RHold = RGoto = LGoto = entity():pos() + vec(0, 0, MHeight)
}


#-- sim
interval(60)

DT = curtime() - CT
CT = curtime()

if (DT > 1) { exit() }


#-- mech
MVel = MAng:forward() * 175


#-- gait
GTime = GTime + DT / 1
GSpan = 0.85


#-- left
local LTime = (GTime >= 0 & GTime <= GSpan) ? (GTime / GSpan) : ((GSpan > 1) & (GTime + 1 >= 0 & GTime + 1 <= GSpan)) ? ((GTime + 1) / GSpan) : 0
if (LTime) {
    if (LMove == 0) {
        LHold = LGoto
        LMove = 1
    }
    if (LMove == 1) {
        local Check = rangerOffset(MHeight * 2, rangerOffset(MPos, toWorld(vec(0, MWidth, 0), ang(), MPos, MAng) + MVel):position(), vec(0, 0, -1))
        if (Check:hit()) {
            LGoto = Check:position() + Check:hitNormal() * 6
            
            local Dir = LGoto - LHold
            if (Dir) {
                local Mid = mix(LGoto, LHold, 0.85) + Dir:toAngle():up() * Dir:length() * 0.25
                LPos = mix(bezier(LHold, Mid, LGoto, LTime), LPos, LTime)
                LOsc = cos(360 * LTime) * MHeight * -0.25
            }
            else {
                LOsc = 0    
            }
        }
    }
}
else {
    if (LMove) {
        LPos = LGoto
        LMove = 0    
    }
}


#-- right
local RTime = (GTime >= 0.5 & GTime <= 0.5 + GSpan) ? ((GTime - 0.5) / (0.5 + GSpan - 0.5)) : ((0.5 + GSpan > 1) & (GTime + 1 >= 0.5 & GTime + 1 <= 0.5 + GSpan)) ? ((GTime + 1 - 0.5) / (0.5 + GSpan - 0.5)) : 0
if (RTime) {
    if (RMove == 0) {
        RHold = RGoto
        RMove = 1
    }
    if (RMove == 1) {
        local Check = rangerOffset(MHeight * 2, rangerOffset(MPos, toWorld(vec(0, -MWidth, 0), ang(), MPos, MAng) + MVel):position(), vec(0, 0, -1))
        if (Check:hit()) {
            RGoto = Check:position() + Check:hitNormal() * 6
            
            local Dir = RGoto - RHold
            if (Dir) {
                local Mid = mix(RGoto, RHold, 0.85) + Dir:toAngle():up() * Dir:length() * 0.25
                RPos = mix(bezier(RHold, Mid, RGoto, RTime), RPos, RTime)
                ROsc = cos(360 * RTime) * MHeight * -0.25
            }
            else {
                ROsc = 0
            }
        }
    }
}
else {
    if (RMove) {
        RPos = RGoto
        RMove = 0          
    }
}


#-- mech
MPos = (LPos + RPos) / 2 + vec(0, 0, MHeight + LOsc + ROsc)


#-- gait
if (GTime > 1) {
    GTime = 0
}


#-- visual
holoPos(1, MPos)
holoPos(2, LPos)
holoPos(3, RPos)
