@name holo_character_controller

# INPUTS
@inputs [Camera]:wirelink [W A S D ] [Active] [R Space Shift] [Entity]:entity

# CORE
@persist [MODE MOVETYPE]:string [TIME_DELTA TIME_CURRENT] [PLAYER]:entity [DIR_UP]:vector [CONTROLLER]:entity

# CONTROLLER -> PHYSICS
@persist [POSITION VELOCITY GRAVITY]:vector [DIR_MOVE DIR_LOOK]:vector [BBOX_MIN BBOX_MAX]:vector

# CONTROLLER -> FLAGS
@persist [HIT_BELOW HIT_ABOVE HIT_BBOX]

# CONTROLLER -> CONSTANTS
@persist [HEIGHT_STAND HEIGHT_JUMP HEIGHT_CURRENT] [K_GRAVITY]

# TRIGGERS
@trigger none
@model models/maxofs2d/hover_plate.mdl


#[

    A HOLO CHARACTER CONTROLLER
    by shadowscion

    FEARURES:
        - BBOX COLLISIONS
        - GRAVITY
        - JUMPING
        - TWO MOVEMENT SCHEMES
            - "CAMERA_LOOK" -> character faces camera at all times
            - "CAMERA_MOVE" -> character is angled local to camera direction when WASD is pressed
]#


if (first()) {
    # SETUP -> CONFIG
    HEIGHT_STAND = 72
    HEIGHT_JUMP  = 150
    RADIUS       = 15
    K_GRAVITY    = -685

    MOVETYPE = "CAMERA_MOVE"
    MODE = "GROUND"


    # SETUP -> BBOX
    function recalc_bbox(Radius,Height) {
        HEIGHT_CURRENT = Height
        BBOX_MIN = vec(-Radius,-Radius,-Height*0.5)
        BBOX_MAX = vec(Radius,Radius,0)
    }

    recalc_bbox(RADIUS,HEIGHT_STAND)

    CONTROLLER = holoCreate(9000,entity():pos() + vec(0,0,HEIGHT_CURRENT)),holoModel(9000,"models/sprops/misc/origin.mdl")
    POSITION   = CONTROLLER:pos()


    # SETUP -> CAMERA
    Camera["Activated",number] = 1
    Camera["Position",vector] = vec()
    Camera["Distance",number] = 100
    Camera["Parent",entity] = CONTROLLER


    # SETUP -> SIM
    DIR_UP = vec(0,0,1)
    TIME_CURRENT = curtime()

    entity():setMaterial("beer/wiremod/gate_e2")

    timer("main",500)
}

if (clk("main")) {
    # SIM
    timer("main",60)

    TIME_DELTA = curtime() - TIME_CURRENT
    TIME_CURRENT = curtime()


    # GROUND MODE
    if (MODE == "GROUND") {
        #[
            COLLISION -> LINEAR
                - REFLECT BBOX HITPOS ALONG BBOX HITNORMAL
                - CORRECT VELOCITY FOR THIS REFLECTION

            FLAGS -> HIT_BBOX:1
        ]#
        local Trace_BBox = rangerOffsetHull(POSITION,POSITION + VELOCITY,BBOX_MIN,BBOX_MAX)
        if (Trace_BBox:hit()) {
            local CheckPos = POSITION + VELOCITY
            local CheckHit = Trace_BBox:position()
            local CheckDir = Trace_BBox:hitNormal():setZ(0)*1.05

            Trace_BBox = rangerOffsetHull(CheckHit,CheckPos - CheckDir*(CheckPos - CheckHit):dot(CheckDir),BBOX_MIN,BBOX_MAX)

            VELOCITY = (Trace_BBox:position() - POSITION):setZ(0)
            HIT_BBOX = 1
        }
        else {
            HIT_BBOX = 0
        }


        #[
            COLLISION -> LINEAR
                - ADD VELOCITY TO POSITION
        ]#
        POSITION += VELOCITY


        #[
            COLLISION -> VERTICAL
                - TRACE IN DIRECTION OF VERTICAL MOVEMENT
        ]#
        local Dir_Z = sign(GRAVITY[3]) ?: -1
        local Trace_Z = rangerOffset(9999999,POSITION,vec(0,0,Dir_Z))


        #[
            COLLISION -> VERTICAL -> SLOPE
                - DETECT DOWNWARD SLOPES USING DOT PRODUCT
                - CORRECT HEIGHT TO STICK TO THEM INSTEAD OF FLYING OFF

            FLAGS -> HIT_BELOW:2
        ]#
        if (HIT_BELOW == 1) {
            local Dot_Z = VELOCITY:normalized():dot(Trace_Z:hitNormal())
            if (Dot_Z) {
                if (Trace_Z:distance() < HEIGHT_CURRENT*1.5) {
                    POSITION[3] = Trace_Z:position()[3] + HEIGHT_CURRENT
                    HIT_BELOW = 2
                }
            }
        }


        #[
            COLLISION -> VERTICAL -> BELOW
                - ADD GRAVITY AND CORRECT HEIGHT

            FLAGS -> HIT_BELOW:1
        ]#
        if (Dir_Z == -1) {
            POSITION = POSITION + GRAVITY*TIME_DELTA + vec(0,0,0.5*K_GRAVITY*TIME_DELTA*TIME_DELTA)

            local Hit_Z = Trace_Z:position()[3] + HEIGHT_CURRENT
            if (POSITION[3] <= Hit_Z) {
                POSITION[3] = Hit_Z
                GRAVITY[3] = 0
                HIT_BELOW = 1
            }
            else {
                HIT_BELOW = 0
            }
        }


        #[
            COLLISION -> VERTICAL -> ABOVE
                - ADD GRAVITY AND CORRECT HEIGHT

            FLAGS -> HIT_ABOVE:1
        ]#
        if (Dir_Z == 1) {
            POSITION = POSITION + GRAVITY*TIME_DELTA + vec(0,0,0.5*K_GRAVITY*TIME_DELTA*TIME_DELTA)

            local Hit_Z = Trace_Z:position()[3]
            if (POSITION[3] >= Hit_Z) {
                POSITION[3] = Hit_Z
                GRAVITY[3] = 0
                HIT_ABOVE = 1
            }
            else {
                HIT_ABOVE = 0
            }
        }


        # PLAYER -> EYE
        PLAYER = Entity:driver()
        DIR_LOOK = Entity:toLocalAxis(PLAYER:eye())


        # PLAYER -> MOVEMENT DIRECTION
        if (W|A|S|D) {
            DIR_MOVE = (W - S)*DIR_LOOK:setZ(0) ?: DIR_LOOK:setZ(0)*0.05
            if (A|D) {
                DIR_MOVE += (D - A)*DIR_LOOK:setZ(0):cross(DIR_UP)
            }
        }
        DIR_MOVE = DIR_MOVE:normalized()


        # CONTROLLER -> VELOCITY AND GRAVITY
        if (HIT_BELOW) {
            SPEED_MOVE = (W|A|S|D)*600*TIME_DELTA
            VELOCITY   = DIR_MOVE*SPEED_MOVE

            if (Space) {
                GRAVITY = vec(0,0,sqrt(-2*K_GRAVITY*HEIGHT_JUMP))
                HIT_BBOX = HIT_ABOVE = HIT_BELOW = 0
            }
        }
        else {
            GRAVITY += vec(0,0,K_GRAVITY*TIME_DELTA)
        }


        # OUTPUT
        holoPos(9000,POSITION)

        switch (MOVETYPE) {
            case "CAMERA_LOOK",
                if (VELOCITY) {
                    holoAng(9000,ang(0,atan(DIR_LOOK[2],DIR_LOOK[1]),0))
                }
            break

            case "CAMERA_MOVE",
                holoAng(9000,ang(0,atan(DIR_MOVE[2],DIR_MOVE[1]),0))
            break
        }

    }

    # FLIGHT MODE
    if (MODE == "FLIGHT") {

    }
}
